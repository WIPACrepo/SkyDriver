name: wipac ci/cd

on: [push]

env:
  CI_TEST: 'yes'
  CLIENTMANAGER_IMAGE_WITH_TAG: 'ghcr.io/wipacrepo/skydriver:latest'
  EWMS_PILOT_TASK_TIMEOUT: 999
  SCAN_BACKLOG_RUNNER_SHORT_DELAY: 1
  SCAN_BACKLOG_RUNNER_DELAY: 1
  SCAN_BACKLOG_PENDING_ENTRY_TTL_REVIVE: 200


jobs:

  py-versions:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.versions.outputs.matrix }}
    steps:
      - uses: actions/checkout@v3
      - id: versions
        uses: WIPACrepo/wipac-dev-py-versions-action@v2.1

  flake8:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v3
      - uses: WIPACrepo/wipac-dev-flake8-action@v1.0

  mypy:
    needs: [py-versions]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        py3: ${{ fromJSON(needs.py-versions.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.py3 }}
      - uses: WIPACrepo/wipac-dev-mypy-action@v2.0

  py-setup:
    runs-on: ubuntu-latest
    steps:
      # dependabot can't access normal secrets
      #   & don't run non-branch triggers (like tags)
      - if: |
          github.actor != 'dependabot[bot]' &&
          github.ref_type == 'branch'
        name: checkout (only for non-dependabot non-default branches)
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
      - if: |
          github.actor != 'dependabot[bot]' &&
          github.ref_type == 'branch'
        name: wipac-dev-py-setup-action (only for non-dependabot non-default branches)
        uses: WIPACrepo/wipac-dev-py-setup-action@v2.4
        with:
          base-keywords: WIPAC IceCube

  unit-tests:
    needs: [py-versions]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        py3: ${{ fromJSON(needs.py-versions.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.py3 }}

      - name: pip install
        run: |
          pip install --upgrade pip wheel setuptools
          pip install .[tests]

      - name: Test
        run: |
          pytest -vvv tests/unit

      - name: Dump logs
        if: always()
        run: |
          cat pytest.logs

  integration-tests:
    needs: [py-versions]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        py3: ${{ fromJSON(needs.py-versions.outputs.matrix) }}
    services:
      mongo:
        image: bitnami/mongodb:4
        ports:
        - 27017:27017
    steps:
      - uses: actions/checkout@v3
      - uses: docker/setup-buildx-action@v2
      - uses: docker/build-push-action@v3
        with:
          context: .
          cache-from: type=gha
          cache-to: type=gha,mode=min
          file: Dockerfile
          tags: wipac/skydriver:local
          load: true

      - name: Test
        run: |
          export LATEST_TAG=$( \
              curl -I https://github.com/icecube/skymap_scanner/releases/latest \
              | awk -F '/' '/^location/ {print  substr($NF, 1, length($NF)-1)}' \
              | sed 's/v//' \
          )
          echo $LATEST_TAG  # this tag may be off if there's a delay between GH release & docker hub

          # make test script
          DIR="test-script-dir"
          mkdir $DIR
          echo "#!/bin/bash" >> $DIR/test-script.sh
          echo "set -xe" >> $DIR/test-script.sh
          echo "pip install .[tests]" >> $DIR/test-script.sh
          echo "python -m pytest -vvv tests/integration" >> $DIR/test-script.sh
          chmod +x $DIR/test-script.sh
          cat $DIR/test-script.sh

          docker run --network="host" --rm -i --name test \
              --env LATEST_TAG=$LATEST_TAG \
              $(env | grep '^SKYSCAN_' | awk '$0="--env "$0') \
              $(env | grep '^EWMS_' | awk '$0="--env "$0') \
              $(env | grep '^CLIENTMANAGER_' | awk '$0="--env "$0') \
              $(env | grep '^CI_' | awk '$0="--env "$0') \
              $(env | grep '^SCAN_' | awk '$0="--env "$0') \
              --mount type=bind,source=$(realpath $DIR),target=/local/$DIR \
              wipac/skydriver:local \
              /local/$DIR/test-script.sh

      - name: dump test logs
        if: always()
        run: |
          docker logs test || true

      - name: dump mongo logs
        if: always()
        run: |
          docker logs "${{ job.services.mongo.id }}" || true

  test-build-docker:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: docker/setup-buildx-action@v2
      - uses: docker/build-push-action@v3
        with:
          context: .
          file: Dockerfile
          tags: wipac/skydriver:local

  release:
    # only run on main/master/default
    if: format('refs/heads/{0}', github.event.repository.default_branch) == github.ref
    needs: [flake8, mypy, py-setup, unit-tests, integration-tests, test-build-docker]
    runs-on: ubuntu-latest
    concurrency: release
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
        token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
    - name: Python Semantic Release
      uses: python-semantic-release/python-semantic-release@v7.34.6
      with:
        github_token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        # repository_username: __token__
        # repository_password: ${{ secrets.PYPI_TOKEN }}
